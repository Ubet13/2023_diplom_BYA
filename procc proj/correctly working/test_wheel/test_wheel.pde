/* autogenerated by Processing revision 1283 on 2022-07-26 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;
import processing.*;
import java.*;
import g4p_controls.GWindow;
import g4p_controls.*;



//GButton btnMakeWindow;





float  wheel;
PVector Pos_of_main;
Table table;
int n=3000000;
float [][][] xx = new float[n][5][4];
float [][][] xd = new float[n][5][4];
//float [][][] xd = new float[n][5][4];
int ee=0;
int ee1;
int k, k1;
int x, y;
float e, coef;
float [][][] constr=new float[n][5][4];
float displayWidth_rect_1;
float displayWidth_rect_2;
float displayHeight_rect_1;
float displayHeight_rect_2;


void settings() {
  size(displayWidth, displayHeight, P3D);
  smooth(3);
  table = loadTable("data.csv", "header");
  k1=0;
  k=0;
  //displayWidth_rect_1=displayWidth*4/16;
  //displayWidth_rect_2=displayWidth;
  //displayHeight_rect_1=displayHeight;
  //displayHeight_rect_2=displayHeight*2/16;
  for (TableRow row : table.rows()) {
    ee = row.getInt(0);
    k1=k1+1;
    xx[k1][0][0] = row.getFloat(1)*0.03f;
    xx[k1][1][0] = row.getFloat(2)*0.03f;
    xx[k1][2][0] = row.getFloat(3)*0.03f;
    xx[k1][3][0] = row.getFloat(4)*0.03f;

    xx[k1][0][1] = row.getFloat(5)*0.03f;
    xx[k1][1][1] = row.getFloat(6)*0.03f;
    xx[k1][2][1] = row.getFloat(7)*0.03f;
    xx[k1][3][1] = row.getFloat(8)*0.03f;

    xx[k1][0][2] = row.getFloat(9)*0.03f;
    xx[k1][1][2] = row.getFloat(10)*0.03f;
    xx[k1][2][2] = row.getFloat(11)*0.03f;
    xx[k1][3][2] = row.getFloat(12)*0.03f;

    xd[k1][0][0] = row.getFloat(13)*0.002f;
    xd[k1][0][1] = row.getFloat(17)*0.002f;
    xd[k1][0][2] = row.getFloat(21)*0.002f;
  }
  println(k1);
}
public void setup() {
  surface.setResizable(true);
  surface.setLocation(100, 100);
  coef=1;
  //btnMakeWindow = new GButton(this, 10, 20, 140, 20, "Make Window");

}



public void draw() {
  background(0);
  rect(0, 0, displayWidth_rect_1, displayHeight_rect_1);
  fill(255);
  rect(0, 0, displayWidth_rect_2, displayHeight_rect_2);
  fill(255);
  

  translate(width*5/8, height*0.85);
  rotateX(PI/2);
  rotateZ(PI/4);
  
  if (wheel==1) {
    coef=coef-0.02;
  }
  if (wheel==-1) {
    coef=coef+0.02;
  }
  
  fill(255);
  stroke(255);
  thread("requestData1");
  thread("requestData2");
  thread("requestData3");
  thread("requestData4");
  for (int i = 0; i < n; i++) {
    point(constr[i][0][0]*coef, constr[i][0][1]*coef, constr[i][0][2]*coef);
  }
  //  thread("requestData2");
  //thread("requestData3");
  //void requestData1() {
  //   for (int i = 0; i < n; i++) {
  //     point((xx[i][0][0]+xd[i][0][0]*parseFloat(mouseX-width/2))*coef, (xx[i][0][1]+xd[i][0][1]*parseFloat(mouseX-width/2))*coef, (xx[i][0][2]+xd[i][0][2]*parseFloat(mouseX-width/2))*coef);
  //   }
}
public void mouseWheel(MouseEvent event) {
  float e = event.getCount();
  println(e);
  wheel=e;
}

void requestData1() {
  for (int i = 0; i < n/4; i++) {
    constr[i][0][0]=xx[i][0][0]+xd[i][0][0]*parseFloat(mouseX-width/2)*coef;
    constr[i][0][1]=xx[i][0][1]+xd[i][0][1]*parseFloat(mouseX-width/2)*coef;
    constr[i][0][2]=xx[i][0][2]+xd[i][0][2]*parseFloat(mouseX-width/2)*coef;
  }
}

void requestData2() {
  for (int i = n/4; i < n/2; i++) {
    constr[i][0][0]=xx[i][0][0]+xd[i][0][0]*parseFloat(mouseX-width/2)*coef;
    constr[i][0][1]=xx[i][0][1]+xd[i][0][1]*parseFloat(mouseX-width/2)*coef;
    constr[i][0][2]=xx[i][0][2]+xd[i][0][2]*parseFloat(mouseX-width/2)*coef;
  }
}
void requestData3() {
  for (int i = n/2; i < n*3/4; i++) {
    constr[i][0][0]=xx[i][0][0]+xd[i][0][0]*parseFloat(mouseX-width/2)*coef;
    constr[i][0][1]=xx[i][0][1]+xd[i][0][1]*parseFloat(mouseX-width/2)*coef;
    constr[i][0][2]=xx[i][0][2]+xd[i][0][2]*parseFloat(mouseX-width/2)*coef;
  }
}

void requestData4() {
  for (int i = n*3/4; i < n; i++) {
    constr[i][0][0]=xx[i][0][0]+xd[i][0][0]*parseFloat(mouseX-width/2)*coef;
    constr[i][0][1]=xx[i][0][1]+xd[i][0][1]*parseFloat(mouseX-width/2)*coef;
    constr[i][0][2]=xx[i][0][2]+xd[i][0][2]*parseFloat(mouseX-width/2)*coef;
  }
}
